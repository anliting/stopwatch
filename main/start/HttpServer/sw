let
    cacheVersion='5',
    db=new Promise(rs=>{
        let openReq=indexedDB.open('')
        openReq.onsuccess=e=>{
            rs(openReq.result)
        }
        openReq.onupgradeneeded=e=>{
            openReq.result.createObjectStore('setting')
        }
    }),settingFlow=(async()=>{
        db=await db
    })()
function getSetting(){
    return new Promise(rs=>{
        let transaction=db.transaction('setting','readwrite')
        let r=transaction.objectStore('setting').get(0)
        transaction.oncomplete=e=>rs(r.result&&r.result)
    })
}
function setSetting(setting){
    return new Promise(rs=>{
        let transaction=db.transaction('setting','readwrite')
        transaction.objectStore('setting').put(setting,0)
        transaction.oncomplete=rs
    })
}
onactivate=e=>e.waitUntil((async()=>
    Promise.all((await caches.keys()).map(k=>
        k==cacheVersion||caches.delete(k)
    ))
)())
onfetch=e=>e.respondWith((async()=>{
    let reqForCache=e.request.clone()
    return await(await caches.open(cacheVersion)).match(reqForCache)||
        fetch(e.request)
})())
oninstall=e=>e.waitUntil((async()=>
    (await caches.open(cacheVersion)).addAll([
        '.',
        '%23icon',
        '%23manifest',
        '%23mi.woff2',
    ])
)())
onmessage=e=>{
    switch(e.data[0]){
        case'getSetting':
            e.waitUntil(settingFlow=(async()=>{
                await settingFlow
                e.source.postMessage(['setSetting',await getSetting()])
            })())
        break
        case'setSetting':
            e.waitUntil(settingFlow=(async()=>{
                await settingFlow
                await Promise.all([
                    setSetting(e.data[1]),
                    (async()=>
                        (await clients.matchAll({
                            includeUncontrolled:true
                        })).map(c=>
                            c.postMessage(e.data)
                        )
                    )(),
                ])
            })())
        break
    }
}
